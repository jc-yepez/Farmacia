CREATE USER FARMACIA_TOAPANT_VILLAC_YEPEZ IDENTIFIED BY FARMACIA;
GRANT CONNECT, RESOURCE, UNLIMITED TABLESPACE TO FARMACIA_TOAPANT_VILLAC_YEPEZ;

CREATE TABLE LABORATORIOS(
COD_LAB VARCHAR(3),
CONSTRAINT CLAVE_LAB PRIMARY KEY(COD_LAB),
NOM_LAB VARCHAR(10) NOT NULL,
DIR_LAB VARCHAR(15) NOT NULL,
TEL_LAB VARCHAR(10) NOT NULL
);

CREATE TABLE PROVEEDORES(
COD_PRO VARCHAR(3),
CONSTRAINT CLAVE_PRO PRIMARY KEY(COD_PRO),
NOM_PRO VARCHAR(20) NOT NULL,
TEL_PRO VARCHAR(10) NOT NULL
);

CREATE TABLE FARMACEUTICO(
CED_FAR VARCHAR(10),
CONSTRAINT CLAVE_FAR PRIMARY KEY(CED_FAR),
NOM1_FAR VARCHAR(10) NOT NULL,
NOM2_FAR VARCHAR(10) NOT NULL,
APE1_FAR VARCHAR(10) NOT NULL,
APE2_FAR VARCHAR(10) NOT NULL,
TEL_FAR VARCHAR(10) NOT NULL,
DIR_FAR VARCHAR(20) NOT NULL,
ADMIN VARCHAR(10),
CONSTRAINT ADMINISTRADOR FOREIGN KEY(ADMIN) REFERENCES FARMACEUTICO(CED_FAR)
);

CREATE TABLE CLIENTES(
CED_CLI VARCHAR(10),
CONSTRAINT CLAVE_CLI PRIMARY KEY(CED_CLI),
NOM1_CLI VARCHAR(10) NOT NULL,
NOM2_CLI VARCHAR(10),
APE1_CLI VARCHAR(10) NOT NULL,
APE2_CLI VARCHAR(10),
TEL_CLI VARCHAR(10),
DIR_CLI VARCHAR(20) NOT NULL
);

CREATE TABLE MEDICAMENTOS(
COD_MED VARCHAR(5),
CONSTRAINT CLAVE_MED PRIMARY KEY(COD_MED),
NOM_COM_MED VARCHAR(20) NOT NULL,
COMP_PRINC VARCHAR(20) NOT NULL,
TIPO_MED VARCHAR(10) NOT NULL,
CONSTRAINT TIPO_G_E CHECK( TIPO_MED IN('GENERICO', 'ESPECIFICO')),
FEC_CAD_MED DATE NOT NULL,
MG_MED NUMBER NOT NULL,
CONSTRAINT MILIGRAMAGE CHECK( MG_MED BETWEEN 1 AND 2000),
LOTE_MED VARCHAR(20) NOT NULL,
STOCK NUMBER NOT NULL,
CONSTRAINT EXISTENCIA CHECK(STOCK>=0),
PRES_MED VARCHAR(10) NOT NULL,
CONSTRAINT PRESENTACION CHECK(PRES_MED IN('CAPSULA','INYECCION','GEL','JARABE',
'HUNGUENTO','CREMA','POLVO','LIQUIDO','SPRAY','GAS','OTRO')),
VIA_ADM_MED VARCHAR(20) NOT NULL,
CONSTRAINT VIA_ADMINISTRACION CHECK(VIA_ADM_MED IN('ORAL','INTRAVENOSA',
'INTRAMUSCULAR','TOPICO','SUBCUTANEA','INHALATORIA')),
TIP_VENT_MED VARCHAR(10) NOT NULL,
CONSTRAINT LIBRE_RECETA CHECK(TIP_VENT_MED IN('LIBRE','RECETA')),
COST_COMP_MED NUMBER(5,2) NOT NULL,
COST_VENT_MED NUMBER(5,2) NOT NULL,
COD_LAB_P VARCHAR(3),
CONSTRAINT COD_LAB_P FOREIGN KEY(COD_LAB_P) REFERENCES LABORATORIOS(COD_LAB)
);

CREATE TABLE FACTURAS_UNO(
NUM_FAC NUMBER,
CONSTRAINT CLAVE_FAC PRIMARY KEY(NUM_FAC),
FEC_FAC DATE NOT NULL,
CED_FAC_FARM VARCHAR(10),
CONSTRAINT CEDULA_FAR_P FOREIGN KEY(CED_FAC_FARM) REFERENCES FARMACEUTICO(CED_FAR),
CED_FAC_CLI VARCHAR(10),
CONSTRAINT CEDULA_CLI_P FOREIGN KEY(CED_FAC_CLI) REFERENCES CLIENTES(CED_CLI),
TOTAL_FAC NUMBER(5,2)
);

CREATE TABLE DETALLE_FACTURA(
NUM_FAC_P NUMBER NOT NULL,
CONSTRAINT NUM_FAC_PERTENECE FOREIGN KEY(NUM_FAC_P) REFERENCES FACTURAS_UNO(NUM_FAC),
COD_MED_P VARCHAR(5) NOT NULL,
CONSTRAINT CODIGO_MEDICAMENTO FOREIGN KEY(COD_MED_P) REFERENCES MEDICAMENTOS(COD_MED),
CANT_FAC NUMBER
);

CREATE TABLE COMPRA(
NUM_COMPR NUMBER NOT NULL,
CONSTRAINT CLAVE_COMPR PRIMARY KEY(NUM_COMPR),
FEC_COMPR DATE NOT NULL,
COD_PRO_P VARCHAR(3),
CONSTRAINT COD_PRO_P FOREIGN KEY(COD_PRO_P) REFERENCES PROVEEDORES(COD_PRO),
COD_ADM_P VARCHAR(10),
CONSTRAINT COD_ADM_P FOREIGN KEY(COD_ADM_P) REFERENCES FARMACEUTICO(CED_FAR)
);

CREATE TABLE COMPRA_DETALLE(
NUM_COMPR_P NUMBER,
CONSTRAINT NUM_COMPR_P FOREIGN KEY(NUM_COMPR_P) REFERENCES COMPRA(NUM_COMPR),
CANT_MED NUMBER,
COD_MED_P VARCHAR(5) NOT NULL,
CONSTRAINT CODIGO_MEDICAMENTO_COMPRA FOREIGN KEY(COD_MED_P) REFERENCES MEDICAMENTOS(COD_MED)
);


CREATE SEQUENCE SEC1
INCREMENT BY 1
START WITH 1
MAXVALUE 100
NOCYCLE
NOCACHE;
CREATE SEQUENCE SEC2
INCREMENT BY 1
START WITH 1
MAXVALUE 100
NOCYCLE
NOCACHE;
CREATE SEQUENCE SEC3
INCREMENT BY 1
START WITH 1
MAXVALUE 100
NOCYCLE
NOCACHE;

INSERT INTO DETALLE_FACTURA
VALUES(2,"MED03",5);




INSERT INTO FARMACEUTICO
VALUES('1802364846','ALEX','DARIO','MANOBANDA','PALOMO','032154638','AMBATO','1802364846');
INSERT INTO FARMACEUTICO
VALUES('1802364847','PAOLA','OLGA','VILLAROEL','MIRANDA','04211669','ATOCHA','1802364846');
INSERT INTO FARMACEUTICO
VALUES('1802364848','PAUL','DANIEL','WALKER','TEXAS','042156','HUACHI','1802364846');
INSERT INTO FARMACEUTICO
VALUES('1802364849','MONSE','JAZMIN','FRUTOS','TAYO','0987574849','TAMBO','1802364846');




INSERT INTO CLIENTES
VALUES('1804745334','ROnnIE','ALEXANDER','VILLACIS','LIZANO','032420197','AMBato');
INSERT INTO CLIENTES
VALUES('112724563','angel','migue','garcia','yepez','032421854','AMBato');
INSERT INTO CLIENTES
VALUES('1804547488','ROnnIE','ALEXANDER','VILLACIS','LIZANO','032420197','pelileo');


INSERT INTO LABORATORIOS
VALUES('L01','NIFA','QUITO','052698736');
INSERT INTO LABORATORIOS
VALUES('L02','MERK','QUITO','864645635');
INSERT INTO LABORATORIOS
VALUES('L03','BAYER','QUITO','099999999');

INSERT INTO MEDICAMENTOS
VALUES('MED01','FLUCONASOL','FLUCONAZOL','GENERICO',TO_DATE('2020/05/13','YYYY/MM/DD'),500,'3156',100,'CAPSULA','ORAL','LIBRE',8,10,'L01');
INSERT INTO MEDICAMENTOS
VALUES('MED02','AMOXILINA','AMOXICILINA','ESPECIFICO',TO_DATE('2019/05/13','YYYY/MM/DD'),250,'1205',100,'CAPSULA','ORAL','LIBRE',5,7,'L01');
INSERT INTO MEDICAMENTOS
VALUES('MED03','ACITROMITEX','AZITROMICINA','GENERICO',TO_DATE('2018/05/13','YYYY/MM/DD'),150,'666',100,'CAPSULA','ORAL','LIBRE',9,12,'L01');
INSERT INTO MEDICAMENTOS
VALUES('MED04','Albuterol','Salbutamol','ESPECIFICO',TO_DATE('2017/05/13','YYYY/MM/DD'),250,'1205',100,'JARABE','ORAL','LIBRE',4,5,'L02');
INSERT INTO MEDICAMENTOS
VALUES('MED05','Penicilamina','PENICILINA','GENERICO',TO_DATE('2020/05/13','YYYY/MM/DD'),250,'1205',100,'INYECCION','INTRAMUSCULAR','LIBRE',2,5,'L02');
INSERT INTO MEDICAMENTOS
VALUES('MED06','HEPALIFE','HEPARINA','GENERICO',TO_DATE('2019/05/13','YYYY/MM/DD'),250,'1205',100,'CAPSULA','ORAL','LIBRE',3,6,'L02');
INSERT INTO MEDICAMENTOS
VALUES('MED07','Liposomal','Anfotericina B','ESPECIFICO',TO_DATE('2018/05/13','YYYY/MM/DD'),550,'1205',250,'INYECCION','INTRAVENOSA','RECETA',10,15,'L02');
INSERT INTO MEDICAMENTOS
VALUES('MED08','DICLOFENAZEN','DICLOFENACO','GENERICO',TO_DATE('2017/05/13','YYYY/MM/DD'),600,'102',300,'INYECCION','INTRAVENOSA','LIBRE',5,7,'L02');
INSERT INTO MEDICAMENTOS
VALUES('MED10','PEDIALITE','SALES MINERALES','ESPECIFICO',TO_DATE('2020/05/13','YYYY/MM/DD'),500,'5674',200,'LIQUIDO','ORAL','LIBRE',3,2,'L03');
INSERT INTO MEDICAMENTOS
VALUES('MED09','APRONAX','Naproxeno sódico','GENERICO',TO_DATE('2019/05/13','YYYY/MM/DD'),550,'1805',300,'CAPSULA','ORAL','LIBRE',8,11,'L03');
INSERT INTO MEDICAMENTOS
VALUES('MED11','AMOXION','AMOXICILINA','ESPECIFICO',TO_DATE('2021/05/13','YYYY/MM/DD'),600,'1555',300,'INYECCION','INTRAVENOSA','RECETA',9,10,'L03');


INSERT INTO PROVEEDORES
VALUES('P01','PROVIDIN',0995103017);
INSERT INTO PROVEEDORES
VALUES('P02','FARMACOS LARREA',0995103017);
INSERT INTO PROVEEDORES
VALUES('P03','DURAN',0995103017);


INSERT INTO COMPRA
VALUES(SEC1.NEXTVAL,TO_DATE('2016/05/13 17:58:00','YYYY/MM/DD HH:MIMI:SS'), 'P01','1802364846');
INSERT INTO COMPRA
VALUES(SEC1.NEXTVAL,TO_DATE('2016/05/13 11:58:00','YYYY/MM/DD HH:MIMI:SS'),'P02','1802364846');
INSERT INTO COMPRA
VALUES(SEC1.NEXTVAL,TO_DATE('2016/05/10 17:58:00','YYYY/MM/DD HH:MIMI:SS'),'P03','1802364846');
INSERT INTO COMPRA
VALUES(SEC1.NEXTVAL,TO_DATE('2016/05/12 08:58:00','YYYY/MM/DD HH:MIMI:SS'),'P02','1802364846');
INSERT INTO COMPRA
VALUES(SEC1.NEXTVAL,TO_DATE('2016/05/07 14:58:00','YYYY/MM/DD HH:MIMI:SS'),'P01','1802364846');

INSERT INTO COMPRA_DETALLE
VALUES(6,734,'MED01');
INSERT INTO COMPRA_DETALLE
VALUES(7,600,'MED02');
INSERT INTO COMPRA_DETALLE
VALUES(8,800,'MED04');
INSERT INTO COMPRA_DETALLE
VALUES(10,100,'MED07');



INSERT INTO FACTURAS_UNO 
VALUES(SEC3.NEXTVAL,TO_DATE('2016/05/01 17:58:00','YYYY/MM/DD HH:MIMI:SS'),'1802364846','1804745334',50);
INSERT INTO FACTURAS_UNO
VALUES(SEC3.NEXTVAL,TO_DATE('2016/05/02 17:58:00','YYYY/MM/DD HH:MIMI:SS'),'1802364847','1804547488',40);
INSERT INTO FACTURAS_UNO
VALUES(SEC3.NEXTVAL,TO_DATE('2016/05/02 07:58:00','YYYY/MM/DD HH:MIMI:SS'),'1802364848','1804745334',30);
INSERT INTO FACTURAS_UNOSE
VALUES(SEC3.NEXTVAL,TO_DATE('2016/05/03 10:58:00','YYYY/MM/DD HH:MIMI:SS'),'1802364847','112724563',20);
INSERT INTO FACTURAS_UNO
VALUES(SEC3.NEXTVAL,TO_DATE('2016/05/03 17:58:00','YYYY/MM/DD HH:MIMI:SS'),'1802364846','1804547488',90);

INSERT INTO DETALLE_FACTURA
VALUES('2','MED01',4);
INSERT INTO DETALLE_FACTURA
VALUES('2','MED02',5);
INSERT INTO DETALLE_FACTURA
VALUES('3','MED04',6);
INSERT INTO DETALLE_FACTURA
VALUES('6','MED07',7);
INSERT INTO DETALLE_FACTURA
VALUES('7','MED07',2);
INSERT INTO DETALLE_FACTURA
VALUES('8','MED07',1);


********************************************************************************trigers
CREATE TRIGGER LIMP_FARM_TRG
BEFORE INSERT ON FARMACEUTICO
FOR EACH ROW
BEGIN
:NEW.NOM1_FAR:= UPPER(:NEW.NOM1_FAR);
:NEW.APE1_FAR:= UPPER(:NEW.APE1_FAR);
:NEW.DIR_FAR:= UPPER(:NEW.DIR_FAR);
END;
.
/
CREATE OR REPLACE TRIGGER LIMP_FAR_TRG
BEFORE INSERT OR UPDATE ON FARMACEUTICO
FOR EACH ROW
BEGIN
:NEW.NOM1_FAR:= UPPER(:NEW.NOM1_FAR);
:NEW.APE1_FAR:= UPPER(:NEW.APE1_FAR);
:NEW.DIR_FAR:= UPPER(:NEW.DIR_FAR);
END;
.
/

CREATE OR REPLACE TRIGGER LIMP_CLI_TRG
BEFORE INSERT OR UPDATE ON CLIENTES
FOR EACH ROW
BEGIN
:NEW.NOM1_CLI:= UPPER(:NEW.NOM1_CLI);
:NEW.APE1_CLI:= UPPER(:NEW.APE1_CLI);
:NEW.DIR_FAR:= UPPER(:NEW.DIR_FAR);
END;
.
/

CREATE OR REPLACE TRIGGER LIMP_LAB_TRG
BEFORE INSERT OR UPDATE ON LABORATORIOS
FOR EACH ROW
BEGIN
:NEW.COD_LAB:= UPPER(:NEW.COD_LAB);
:NEW.NOM_LAB:= UPPER(:NEW.NOM_LAB);
:NEW.DIR_LAB:= UPPER(:NEW.DIR_LAB);
END;
.
/

CREATE OR REPLACE TRIGGER LIMP_MED_TRG
BEFORE INSERT OR UPDATE ON MEDICAMENTOS
FOR EACH ROW
BEGIN
:NEW.COD_MED:= UPPER(:NEW.COD_MED);
:NEW.NOM_COM_MED:= UPPER(:NEW.NOM_COM_MED);
:NEW.COMP_PRINC:= UPPER(:NEW.COMP_PRINC);
:NEW.TIPO_MED:= UPPER(:NEW.TIPO_MED);
:NEW.PRES_MED:= UPPER(:NEW.PRES_MED);
:NEW.TIPO_MED:= UPPER(:NEW.TIPO_MED);
:NEW.VIA_ADM_MED:= UPPER(:NEW.VIA_ADM_MED);
:NEW.TIP_VENT_MED:= UPPER(:NEW.TIP_VENT_MED);
:NEW.COD_LAB_P:= UPPER(:NEW.COD_LAB_P);
END;
.
/


CREATE OR REPLACE TRIGGER VAL_PRE_ENT_TRG
BEFORE UPDATE OF COST_COMP_MED ON MEDICAMENTOS
FOR EACH ROW
DECLARE
 ERROR_PRECIO_ENT EXCEPTION;
BEGIN
IF(:NEW.COST_COMP_MED < 0) THEN 
RAISE ERROR_PRECIO_ENT;
END IF;
EXCEPTION
WHEN ERROR_PRECIO_ENT THEN
RAISE_APPLICATION_ERROR(-20001,'El precio no debe ser negativo');
END;
.
/

CREATE OR REPLACE TRIGGER VAL_INS_PRE_ENT_TRG
BEFORE INSERT  ON MEDICAMENTOS
FOR EACH ROW
DECLARE
 ERROR_PRECIO_ENT0 EXCEPTION;
BEGIN
IF(:NEW.COST_COMP_MED < 0) THEN 
RAISE ERROR_PRECIO_ENT0;
END IF;
EXCEPTION
WHEN ERROR_PRECIO_ENT0 THEN
RAISE_APPLICATION_ERROR(-20001,'El precio INGRESADO  no debe ser negativo');
END;
.
/
CREATE OR REPLACE TRIGGER VAL_PRE_VENT_TRG
BEFORE UPDATE OF COST_VENT_MED ON MEDICAMENTOS
FOR EACH ROW
DECLARE
 ERROR_PRECIO_VENT EXCEPTION;
BEGIN
IF(:NEW.COST_VENT_MED < 0) THEN 
RAISE ERROR_PRECIO_VENT;
END IF;
EXCEPTION
WHEN ERROR_PRECIO_VENT THEN
RAISE_APPLICATION_ERROR(-20001,'El precio no debe ser negativo');
END;
.
/

CREATE OR REPLACE TRIGGER VAL_PRE_VENT_TRG
BEFORE INSERT ON MEDICAMENTOS
FOR EACH ROW
DECLARE
 ERROR_PRECIO_VENT0 EXCEPTION;
BEGIN
IF(:NEW.COST_VENT_MED < 0) THEN 
RAISE ERROR_PRECIO_VENT0;
END IF;
EXCEPTION
WHEN ERROR_PRECIO_VENT0 THEN
RAISE_APPLICATION_ERROR(-20001,'El precio INGRESADO no debe ser negativo');
END;
.
/

CREATE OR REPLACE TRIGGER LIMP_PRO_TRG
BEFORE INSERT OR UPDATE ON PROVEEDORES
FOR EACH ROW
BEGIN
:NEW.NOM_PRO:= UPPER(:NEW.NOM_PRO);
END;
.
/


*********************************************************************************************************
VISTAS COMPLEJAS

Una vista compleja puede contener 
-joins
-funciones de grupo
-agrupaciones(GROUP BY) 

entre una o màs tablas

CONNECT SYSTEM

GRANT CREATE ANY VIEW TO FARMACIA_TOAPANT_VILLAC_YEPEZ; 


disconnect SYSTEM;
Ejemplo:

Crear una vista que muestre el nombre, fecha de caducidad, tipo y el componente principal de lso medicamentos 
que entrega el laboratorio nif.

CREATE OR REPLACE VIEW COMPLEJA1
AS 
SELECT M.NOM_COM_MED,M.FEC_CAD_MED, M.TIPO_MED, M.COMP_PRINC
FROM MEDICAMENTOS M, LABORATORIOS L
WHERE L.NOM_LAB='NIFA'
AND   L.COD_LAB = M.COD_LAB_P;


INSER INTO COMPLEJA1
VALUES('AM',SYSDATE+1,'GENERICO,'AMOXICILINA');

ESTE INGRESO NOS ES POSIBLE DEBIDO A QUE EN LA VISTA NO ESTAN CAMPOS DE LA TABLA QUE SON OBLIGATORIOS(NOT NULL)
Y AL TRATAR DE INGRESAR LOS DATOS POR LA VISTA NO TENDRIAN VALOR(SERIAN NULL).
(SOO SE INGRESAN LOS Q SON OBLIGATORIOS EN LA VISTA)

DESC CLIENTES;


CREAR UNA VISTA QUE MUESTRE LA CÉDULA, NOMBRE, APELLIDO Y DIR DE LOS CLIENTES.


CREATE OR REPLACE VIEW SIMPLEC1
AS
SELECT CED_CLI,NOM1_CLI,APE1_CLI,DIR_FAR
FROM CLIENTES;

SELECT * FROM SIMPLEC1;


INSERT INTO SIMPLEC1
VALUES('CARLOS','TOAPANTA','PICAIHUA');

CREAR UNA VISTA CUANTOS MEDICAMENTOS DEL LABORATORIO NIFA
SE HAN VENDIDO DURANTE ESTE MES,


CREATE OR REPLACE VIEW COMPLEJA2
AS SELECT COUNT(M.COD_MED) AS CONTEO
FROM MEDICAMENTOS M, LABORATORIOS L,DETALLE_FACTURA FD, FACTURAS_UNO F
WHERE M.COD_MED = FD.COD_MED_P
AND   M.COD_LAB_P = L.COD_LAB 
AND   L.NOM_LAB = 'NIFA'
AND   FD.NUM_FAC_P = F.NUM_FAC
AND   F.FEC_FAC BETWEEN SYSDATE-23 AND SYSDATE;

  
**********************************************************************************


ALGEBRA RELACIONAL CON OPERADORES DE CONJUNTO

operadores de conjunto

SON OPERADORES QUE SE BASAN EN LA TEORIA DE CONJUNTOS PARA TRABAJAR
CON TABLAS 
SON:
	UNION 
	INTERSECT
	DIFERENCIA

**********************OPERADOR UNION

La operacion de la tablaA UNION tablaB da como resultado una tablaC 
cuyas filas seran el resultado de las filas de la tablaA y las flas de la
tablaB .
Se debe cumplir que la tablaA y la tablaB tengan el mismo numero de columnas
que puede ser filtradas por una cnsulta SELECT.

EJEMPLO:

CREATE TABLE EST_SISTEMAS
(
Ced_Est VARCHAR(10) primary key,
Nom_Est VARCHAR(12) not null,
Ape_Est VARCHAR(12) not null
);

CREATE TABLE EST_INGLES
(
CI_Est VARCHAR(10) primary key,
Nombre_Est VARCHAR(10) not null,
Apellido_Est VARCHAR(10) not null,
Dire_Est VARCHAR(10) not null
);


INSERT INTO EST_SISTEMAS
VALUES('1805','Jessenia','Toapanta');
INSERT INTO EST_SISTEMAS
VALUES('1804','Miguel','Garcia');
INSERT INTO EST_SISTEMAS
VALUES('1806','Ronnie','Villacis');
INSERT INTO EST_SISTEMAS
VALUES('1801','Darwin','Quimi');

INSERT INTO EST_INGLES
VALUES('1905','Darwin','Quimi','ambato');
INSERT INTO EST_INGLES
VALUES('1904','Miguel','Garcia','ambato');
INSERT INTO EST_INGLES
VALUES('1906','Marcelo','Villa','ambato');
INSERT INTO EST_INGLES
VALUES('1901','Pamela','Rodriguez','quito');


SELECT Ced_Est, Nom_Est,Ape_Est
FROM EST_SISTEMAS
UNION
SELECT CI_Est, Nombre_Est,Apellido_Est
FROM EST_INGLES;


********SE OBTINE SIN DATOS REPETIDOS

*******CON UNION ALL SE OBTIENEN CON TUPLES REPETIDOS

SELECT Ced_Est, Nom_Est,Ape_Est
FROM EST_SISTEMAS
UNION all
SELECT CI_Est, Nombre_Est,Apellido_Est
FROM EST_INGLES;


************************OPERACION INTERSECCION

La operacion de la tablaA INTERSECT tablaB da como resultado una tablaC 
cuyas filas seran las filas COMUNES  de la tablaA y la
 tablaB .
Se debe cumplir que la tablaA y la tablaB tengan el mismo numero de columnas
que puede ser filtradas por una consulta SELECT.

SELECT Ced_Est, Nom_Est,Ape_Est
FROM EST_SISTEMAS
INTERSECT
SELECT CI_Est, Nombre_Est,Apellido_Est
FROM EST_INGLES;


EJERCICO:


Mostrar el código del medicamento que se vendió el mes anterior y tambn que se vendió este mes


SELECT M.COD_MED 
FROM MEDICAMENTOS M, FACTURAS_UNO F, DETALLE_FACTURA DF
WHERE M.COD_MED=DF.COD_MED_P
AND   DF.NUM_FAC_P = F.NUM_FAC
AND   F.FEC_FAC BETWEEN '01/04/2016' AND '30/04/2016'  
INTERSECT
SELECT M.COD_MED 
FROM MEDICAMENTOS M, FACTURAS_UNO F, DETALLE_FACTURA DF
WHERE M.COD_MED=DF.COD_MED_P
AND   DF.NUM_FAC_P = F.NUM_FAC
AND   F.FEC_FAC BETWEEN '01/05/2016' AND '23/05/2016';

*****************************OPERACION DIFERENCIA

La operacion de la tablaA MINUS tablaB da como resultado una tablaC 
cuyas filas seran las filas de la tablaA QUE NO ESTEN EN  la TablaB
Se debe cumplir que la tablaA y la tablaB tengan el mismo numero de columnas
que puedan ser filtradas por una consulta SELECT.

EJEMPLO

Mostrar los estudiantes de siteas que no estudien Inglès

SELECT CED_EST, NOM_EST, APE_EST
FROM EST_SISTEMAS
MINUS
SELECT CI_EST,NOMBRE_EST,APELLIDO_EST
FROM EST_INGLES;


NO ES LO MISMO

A MENOS B QUE
B MENOS A

SELECT CI_EST,NOMBRE_EST,APELLIDO_EST
FROM EST_INGLES
MINUS
SELECT CES_EST, NOM_EST, APE_EST
FROM EST_SISTEMAS;


UNA FORMA ALTERNATIVA A LA MINUS(DIFERENCIA) ES UTILIZAR EL OPERADOR NOT IN 
UNA FORMA ALTERNATIVA A LA INTERSECCION ES UTILIZAR EL OPERADOR  IN 

*****************************************************

MOSTRAR EL CODIGO DEL MEDICAMENTO QUE SE VENDIO EN FEBRERO, PERO Q NO SE VENDIO EN MARZO :V 

SELECT M.COD_MED
FROM MEDICAMENTOS M,DETALLE_FACTURA DF, FACTURAS_UNO F
WHERE DF.COD_MED_P=M.COD_MED
AND  F.NUM_FAC = DF.NUM_FAC_P
AND  F.FEC_FAC BETWEEN '01/02/2016' AND '29/02/2016'
MINUS
SELECT M.COD_MED
FROM MEDICAMENTOS M,DETALLE_FACTURA DF, FACTURAS_UNO F
WHERE DF.COD_MED_P=M.COD_MED
AND  F.NUM_FAC = DF.NUM_FAC_P
AND  F.FEC_FAC BETWEEN '01/03/2016' AND '31/03/2016';


SELECT M.COD_MED
FROM MEDICAMENTOS M,DETALLE_FACTURA DF, FACTURAS_UNO F
WHERE DF.COD_MED_P=M.COD_MED
AND  F.NUM_FAC = DF.NUM_FAC_P
AND  F.FEC_FAC BETWEEN '01/02/2016' AND '29/02/2016'
AND  M.COD_MED NOT IN(SELECT M.COD_MED
			FROM MEDICAMENTOS M,DETALLE_FACTURA DF, FACTURAS_UNO F
			WHERE DF.COD_MED_P=M.COD_MED
			AND  F.NUM_FAC = DF.NUM_FAC_P
			AND  F.FEC_FAC BETWEEN '01/03/2016' AND '31/03/2016');



******************************************

EJERCICIOS DE DEBER

MOSTRAR EL CODIGO, EL NOMBRE Y LA FECHA DE CADUCIDAD DE LOS
MEDICAMENTOS QUE SE VENDIERON EN ENERO EN MAS DE 500 UNIDADES, Y QUE SE VENDIERON 
EN FEBRERO EN MAS DE 400 UNIDADES.


SELECT COUNT(M.COD_MED)
FROM MEDICAMENTOS M, DETALLE_FACTURA DT, FACTURAS_UNO F
WHERE DT.COD_MED_P = M.COD_MED
AND DT.NUM_FAC_P = F.NUM_FAC
AND F.FEC_FAC BETWEEN '01/01/2016' AND '31/01/2016'
GROUP BY DT.COD_MED_P
HAVING(COUNT(M.COD_MED)>500);



MOSTRAR EL CODIGO, EL NOMBRE Y LA FECHA DE CADUCIDAD DE LOS
MEDICAMENTOS QUE SE VENDIERON EN MARZO EN MAS DE 100 UNIDADES, PERO QUE NO LLEGARON A 100 UNIDADES  EN ABRIL


MOSTRAR EL CODIGO EL NOMRE DEL MEDICAMENTO MAS VENDIDO EN EL TRANSCURSO DEL 2016

SELECT DT.COD_MED_P
FROM MEDICAMENTOS M, DETALLE_FACTURA DT, FACTURAS_UNO F
WHERE DT.COD_MED_P = M.COD_MED
AND DT.NUM_FAC_P = F.NUM_FAC
AND F.FEC_FAC BETWEEN '01/01/2016' AND SYSDATE
GROUP BY DT.COD_MED_P
HAVING MAX(DT.COD_MED_P);


MOSTRAR EL NOMBRE T APELLIDO DEL CLIENTE QUE HA EFECTRUADO MAS FATORUAS EN ABRIL 2016


MOSTRAR EL NOMBRE Y APELLIDO DEL CLIENTE QUE HA COMPRADO MAS EN DINERO EN ABRIL 2016
































































